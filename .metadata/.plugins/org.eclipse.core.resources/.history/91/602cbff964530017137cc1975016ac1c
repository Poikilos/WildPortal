package me.expertmm.WildPortal;

import java.io.File;
//import java.io.FileOutputStream;
import java.io.IOException;
//import java.io.InputStream;
//import java.io.OutputStream;



//import java.util.Iterator;
//import java.util.ListIterator;
//import java.util.Set;

import org.bukkit.Location;
import org.bukkit.Server;
import org.bukkit.World;
import org.bukkit.configuration.ConfigurationSection;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.configuration.file.YamlConfiguration;

public class WildPortalData {
	
	private File dataFolder;
	public File playersFile;
	public FileConfiguration players;
	public File portalsFile;
	public FileConfiguration portals;
	
	public WildPortalData(File thisDataFolder) {
		this.dataFolder=thisDataFolder;
		try {
			init();
		}
		catch (Exception e) {
			e.printStackTrace();
		}
	    load();
	}
	private void init() throws Exception {
		playersFile = new File(this.dataFolder, "players.yml");
		
		if (!playersFile.exists()) {
			playersFile.getParentFile().mkdirs();
	        //copy(getResource("groups.yml"), playersFile);
	    }
	    players = new YamlConfiguration();
		portalsFile = new File(this.dataFolder, "portals.yml");
		if (!portalsFile.exists()) {
			portalsFile.getParentFile().mkdirs();
	        //copy(getResource("groups.yml"), playersFile);
	    }
	    portals = new YamlConfiguration();
	}
	public void load() {
		try {
	        players.load(playersFile);
	    } catch (Exception e) {
	        e.printStackTrace();
	    }
		try {
	        portals.load(portalsFile);
	    } catch (Exception e) {
	        e.printStackTrace();
	    }
	}
	public Location getPlayerReturnLocation(String playerName) {
		return (players.contains(playerName + "." + "returnLocation"))?((Location)players.get(playerName + "." + "returnLocation")):null;
	}
	public IRect getPortalDestination(String worldName, Location location) {
		IRect result=null; //new IRect(0, 0, 0, 0);
		if (portals.contains(worldName + "." + WildPortalPortal.getIDFromLocation(location) + "." + "destination.rect")) {
			int X = portals.getInt(worldName + "." + WildPortalPortal.getIDFromLocation(location) + "." + "destination.rect" + "." + "X");
			int Y = portals.getInt(worldName + "." + WildPortalPortal.getIDFromLocation(location) + "." + "destination.rect" + "." + "Y");
			int Width = portals.getInt(worldName + "." + WildPortalPortal.getIDFromLocation(location) + "." + "destination.rect" + "." + "Width");
			int Height = portals.getInt(worldName + "." + WildPortalPortal.getIDFromLocation(location) + "." + "destination.rect" + "." + "Height");
			result = new IRect(X,Y, Width, Height);
		}
		else {
			main.logWriteLine("getPortalDestination ERROR: no portal is at block in world " + worldName + " for point "+location.toString());
		}
		return result;
	}
	//public WildPortalPortal getWildPortalAt(Location location) {
	//	WildPortalPortal result=null;
	//	if (portals.contains(location.getWorld().getName() + "." + WildPortalPortal.getIDFromLocation(location))) {
	//		
	//	}
	//	return result;
	//}
	public void setPortalDestination(String worldName, Location location, IRect rect) {
		portals.set(worldName + "." + WildPortalPortal.getIDFromLocation(location) + "." + "destination.rect" + "." + "X", rect.x);
		portals.set(worldName + "." + WildPortalPortal.getIDFromLocation(location) + "." + "destination.rect" + "." + "Y", rect.z);
		portals.set(worldName + "." + WildPortalPortal.getIDFromLocation(location) + "." + "destination.rect" + "." + "Width", rect.width);
		portals.set(worldName + "." + WildPortalPortal.getIDFromLocation(location) + "." + "destination.rect" + "." + "Height", rect.Height);
		save();
	}
	public Boolean setPortalDestinationCenter(Location location, int newCenterX, int newCenterZ) {
		Boolean result=false;
		String wpid=WildPortalPortal.getIDFromLocation(location);
		if (portals.contains(location.getWorld().getName() + "." + wpid + "." + "destination")) {
			result=setPortalDestinationCenter(location.getWorld().getName(), wpid, newCenterX, newCenterZ);
		}
		else {
			main.logWriteLine("setPortalDestinationCenter ERROR: no portal is at "+location.toString());
		}
		return result;
	}
	public Boolean setPortalDestinationCenter(String worldName, String wpid, int newCenterX, int newCenterZ) {
		Boolean result=false;
		if (portals.contains(worldName + "." + wpid + "." + "destination")) {
			int Width = portals.getInt(worldName + "." + wpid + "." + "destination.rect" + "." + "Width");
			int Height = portals.getInt(worldName + "." +wpid + "." + "destination.rect" + "." + "Height");
			portals.set(worldName + "." + wpid + "." + "destination.rect" + "." + "X", newCenterX-Width/2);
			portals.set(worldName + "." + wpid + "." + "destination.rect" + "." + "Y", newCenterZ-Height/2);
			save();
			result=true;
		}
		else {
			main.logWriteLine("setPortalDestinationCenter ERROR: no portal is at worldName."+wpid);
		}
		return result;
	}
	//public void deletePortalData(Location location) {
	//	portals.set(WildPortalPortal.getIDFromLocation(location), null);
	//}
	public void deletePortalData(String portalID) {
		portals.set(portalID, null);
	}
	public void deletePlayerData(String playerName) {
		players.set(playerName, null);
	}
	public Boolean isPortal(Location location) {
		return portals.contains(location.getWorld().getName() + "." + WildPortalPortal.getIDFromLocation(location));
	}
	//public Location getDestionationIfPortalElseNull(Location location) {
	//	Location result=null;
	//	if (isPortal(location)) {
	//		
	//	}
	//	return result;
	//}
	public Location getDestinationCenterIfPortalElseNull(World world, String wpid) {
		Location result=null;
		if (portals.contains(world.getName() + "." + wpid)) {
			result=WildPortalPortal.getLocationFromID(world, wpid);
		}
		return result;
	}
	public void createPortalToWild(Location location, String destWorldName, String destinationKeyword, IRect destXZAsXYRect) {
		int sourceX=location.getBlockX();
		int sourceY=location.getBlockY();
		int sourceZ=location.getBlockZ();
		String sourceWorldName=location.getWorld().getName();
		String wpid=WildPortalPortal.getIDFromLocation(location);
		portals.set(sourceWorldName + "." + wpid + "." + "source.X", Integer.toString(sourceX));
		portals.set(sourceWorldName + "." + wpid + "." + "source.Y", Integer.toString(sourceY));
		portals.set(sourceWorldName + "." + wpid + "." + "source.Z", Integer.toString(sourceZ));
		portals.set(sourceWorldName + "." + wpid + "." + "source.world", sourceWorldName);
		portals.set(sourceWorldName + "." + wpid + "." + "destination.world", destWorldName);
		portals.set(sourceWorldName + "." + wpid + "." + "destination.keyword", destinationKeyword);
		portals.set(sourceWorldName + "." + wpid + "." + "destination.X", Integer.toString(destXZAsXYRect.x));
		portals.set(sourceWorldName + "." + wpid + "." + "destination.Z", Integer.toString(destXZAsXYRect.z));
		portals.set(sourceWorldName + "." + wpid + "." + "destination.Width", Integer.toString(destXZAsXYRect.width));
		portals.set(sourceWorldName + "." + wpid + "." + "destination.Height", Integer.toString(destXZAsXYRect.Height));
		//List<String> allowedPlayerList = Arrays.asList("Abiyahh");  // use comma for more
		//portals.set(sourceWorldName + "." + wpid + "." + "allowedPlayerList", allowedPlayerList);
		portals.set(sourceWorldName + "." + wpid + "." + "allowedGroup", "<Everyone>");
	}
	public Location getPlayerReturnLocation(Server thisServer, String playerName) {
		Location location=null;
		if (players.contains(playerName + "." + "returnLocation")) {
			String worldName = players.getString(playerName + "." + "returnLocation" + "." + "worldName");
			World world = thisServer.getWorld(worldName);
			double x = players.getDouble(playerName + "." + "returnLocation" + "." + "x");
			double y = players.getDouble(playerName + "." + "returnLocation" + "." + "y");
			double z = players.getDouble(playerName + "." + "returnLocation" + "." + "z");
			float yaw = (float)players.getDouble(playerName + "." + "returnLocation" + "." + "yaw");
			//World world = asdf;
			location = new Location(world, x, y, z);
			location.setYaw(yaw);
		}
		return location;
	}
	public ConfigurationSection getPortalSectionByID(String worldName, String wpid) {
		ConfigurationSection result=null;
		//WildPortalPortal result=null;
		ConfigurationSection parent = this.portals.getConfigurationSection(worldName);
		//Set<String> items = parent.getKeys(false);
		//for (Iterator<String> iter = items.iterator(); iter.hasNext(); ) {
		//	String elementID = iter.next();
		//	if (elementID.equals(wpid)) {
		//		result = parent.getConfigurationSection(elementID);
		//		break;
		//	}
		//}
		if (parent.contains(wpid)) {
			result = parent.getConfigurationSection(wpid);
		}
		return result;
	}
	public void setPlayerReturnLocation(String playerName, Location location) {
		//NOTE: this is a cross-world configuration--player can only have one home on server.
		players.set(playerName + "." + "returnLocation" + "." + "worldName", location.getWorld().getName());
		players.set(playerName + "." + "returnLocation" + "." + "x", location.getX());
		players.set(playerName + "." + "returnLocation" + "." + "y", location.getY());
		players.set(playerName + "." + "returnLocation" + "." + "z", location.getZ());
		players.set(playerName + "." + "returnLocation" + "." + "yaw", location.getYaw());
		save();
	}
	public void save() {
	    try {
	    	players.save(playersFile);
	    } catch (IOException e) {
	        e.printStackTrace();
	    }
	    try {
	    	portals.save(portalsFile);
	    } catch (IOException e) {
	        e.printStackTrace();
	    }
	}
}
